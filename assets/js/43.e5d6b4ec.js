(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{267:function(e,n,t){"use strict";t.r(n);var r=t(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"bouwstenen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bouwstenen","aria-hidden":"true"}},[e._v("#")]),e._v(" ðŸ“— Bouwstenen")]),e._v(" "),t("p",[e._v("Een computerprogramma bevat opdrachten die direct kunnen worden vertaald naar instructies die door de computer kunnen worden uitgevoerd.\nDeze opdrachten vormen de bouwstenen van het computerprogramma.\nMet behulp van deze bouwstenen kan een programma worden opgebouwd.\nHierbij wordt gewerkt met drie zogenaamde controlestructuren:")]),e._v(" "),t("ul",[t("li",[e._v("Sequentie")]),e._v(" "),t("li",[e._v("Selectie")]),e._v(" "),t("li",[e._v("Iteratie")])]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"sequentie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sequentie","aria-hidden":"true"}},[e._v("#")]),e._v(" Sequentie")]),e._v(" "),t("p",[e._v("Onder een sequentie wordt verstaan een enkelvoudige opdracht die moet worden uitgevoerd. Mogelijk resulteert de uitvoering van een sequentie in een verandering van gegevenswaarden. Er zijn echter ook opdrachten die de waarden van de gegevens ongemoeid laten, zoals een output-sequentie waarmee iets wordt getoond (uitvoer). Nadat een sequentie is uitgevoerd zal het systeem verder gaan met het uitvoeren van het volgende commando.")]),e._v(" "),t("p",[e._v("Onderstaand voorbeeld bevat een aantal sequenties in de programmeertaal Pascal:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("...\nc := 12 + 13;\nd := c;\nc := c+1;\n...\nwriteln('Hello, World!');\n...\n")])])]),t("p",[e._v("Dit zijn allemaal kleine opdrachten (simpele stappen) die door de onderliggende machine in volgorde uitgevoerd dienen te worden. Bovendien maken zij direct gebruik van de verdeling van het geheugen in kleine cellen door deze cellen direct aan te spreken in termen van variabelen in het programma.\nIn dit voorbeeld zijn c en d de variabelen waar waarden aan worden toegekend.")]),e._v(" "),t("h3",{attrs:{id:"selectie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selectie","aria-hidden":"true"}},[e._v("#")]),e._v(" Selectie")]),e._v(" "),t("p",[e._v("In een aantal gevallen zullen Ã©Ã©n of meerdere elementaire opdrachten uitsluitend onder bepaalde voorwaarden worden uitgevoerd. Imperatieve programmeertalen hebben Ã©Ã©n of meerdere mechanismen waarmee dit kan worden ingevuld: if, else, elseif, case.")]),e._v(" "),t("p",[e._v("Onderstaand voorbeeld bevat een aantal selecties in de programmeertaal Pascal:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (...) then\n   begin\n      ...\n   end;\n\t\nif (...) then\n   begin\n      ...\n   end\nelse\n   begin\n      ...\n   end;\n")])])]),t("h3",{attrs:{id:"iteratie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iteratie","aria-hidden":"true"}},[e._v("#")]),e._v(" Iteratie")]),e._v(" "),t("p",[e._v("Imperatieve programmeertalen bieden de mogelijkheid om Ã©Ã©n of meerdere opdrachten herhaaldelijk te laten uitvoeren: een iteratie. Er zijn twee manieren waarop een iteratie kan worden vormgegeven: een herhaallus met een test vooraf en een herhaallus met een test achteraf. Het grote verschil tussen deze twee vormen is dat bij een herhaallus met een test achteraf de opdrachten binnen de iteratie minstens Ã©Ã©n keer worden uitgevoerd (in een iteratie met een test vooraf is het mogelijk dat de opdrachten binnen de iteratie helemaal nooit uitgevoerd zullen worden). In sommige programmeertalen wordt een iteratie met een test vooraf vormgegeven met een zolang constructie (waarin de doorgaan-conditie wordt getest) en een iteratie met een test achteraf met een totdat constructie (waarin de stop-conditie wordt getest). In andere programmeertalen worden beide soorten iteraties met een zolang-lus vormgegeven.\nVrijwel alle imperatieve programmeertalen bieden tenslotte de mogelijkheid om Ã©Ã©n of meerdere opdrachten een vast aantal keer uit te laten voeren: een for-lus. Conceptueel is dit niet wezenlijk anders dan een iteratie met een test vooraf.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("while (...) do\n   begin\n      ...\n   end;\n   \nrepeat\n   ...\nuntil (...);\n\nfor x := 1 to 10 do\n\tbegin\n\t   ...\n\tend;\n")])])]),t("h3",{attrs:{id:"gestructureerd-vs-ongestructureerd-programmeren"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gestructureerd-vs-ongestructureerd-programmeren","aria-hidden":"true"}},[e._v("#")]),e._v(" Gestructureerd vs. ongestructureerd programmeren")]),e._v(" "),t("p",[e._v("Het is vanaf de eerste imperatieve programmeertalen mogelijk geweest om met behulp van sprong opdrachten (goto-statements) te bepalen waar de uitvoering van de programmacode moet worden vervolgd. In de allereerste imperatieve programmeertalen werden goto-opdrachten onder meer gebruikt ten behoeve van selecties en iteraties. Daarnaast werden sprongopdrachten echter ook op andere manieren toegepast. Het gebruik van deze sprongopdrachten resulteerde veelal in onleesbare en nauwelijks onderhoudbare programmacode. Toonaangevende informatici zoals Edsger Dijkstra en Michael A. Jackson hebben een onderscheid gemaakt tussen gestructureerd en ongestructureerd programmeren, waarbij het verschil vrijwel volledig werd bepaald door het wel of niet gebruiken van sprongopdrachten. Onder gestructureerd programmeren wordt verstaan het imperatief programmeren waarbij uitsluitend gebruik wordt gemaakt van sequenties, selecties en iteraties.")])])}],!1,null,null,null);n.default=a.exports}}]);